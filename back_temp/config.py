"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è AI –ü–æ–º–æ—â–Ω–∏–∫–∞ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
"""

import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from typing import Set, Dict, List, Optional
from dataclasses import dataclass

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

@dataclass
class LanguageConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —è–∑—ã–∫–æ–≤"""
    code: str
    name: str
    flag: str
    date_format: str
    currency: str
    currency_symbol: str

@dataclass
class DocumentTypeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ú–æ–ª–¥–æ–≤—ã"""
    type_id: str
    name_ro: str
    name_ru: str
    keywords_ro: List[str]
    keywords_ru: List[str]
    required_fields: List[str]
    fiscal_code: Optional[str] = None

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤ –ú–æ–ª–¥–æ–≤—ã"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    APP_NAME = "AI –ü–æ–º–æ—â–Ω–∏–∫ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ –ú–æ–ª–¥–æ–≤—ã"
    VERSION = "2.0.0"
    DEBUG = os.getenv("DEBUG", "False").lower() == "true"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    HOST = os.getenv("HOST", "0.0.0.0")
    PORT = int(os.getenv("PORT", "8001"))
    LOG_LEVEL = os.getenv("LOG_LEVEL", "info")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    BASE_DIR = Path(__file__).parent.parent
    UPLOADS_DIR = BASE_DIR / "uploads"
    REPORTS_DIR = BASE_DIR / "reports"
    TEMPLATES_DIR = BASE_DIR / "templates"
    STATIC_DIR = BASE_DIR / "static"
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./accounting_assistant.db")
    
    # OpenAI
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")
    USE_OPENAI_FOR_ENHANCEMENT = os.getenv("USE_OPENAI_FOR_ENHANCEMENT", "True").lower() == "true"
    
    # Tesseract
    TESSERACT_PATH = os.getenv("TESSERACT_PATH", "/opt/homebrew/bin/tesseract")
    TESSERACT_LANGUAGES = ["ron", "rus", "eng"]  # –†—É–º—ã–Ω—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
    SUPPORTED_LANGUAGES = {
        "ro": LanguageConfig(
            code="ro",
            name="Rom√¢nƒÉ",
            flag="üá∑üá¥",
            date_format="%d.%m.%Y",
            currency="MDL",
            currency_symbol="L"
        ),
        "ru": LanguageConfig(
            code="ru", 
            name="–†—É—Å—Å–∫–∏–π",
            flag="üá∑üá∫",
            date_format="%d.%m.%Y",
            currency="MDL",
            currency_symbol="L"
        )
    }
    
    DEFAULT_LANGUAGE = "ru"
    
    # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ú–æ–ª–¥–æ–≤—ã
    MOLDOVAN_DOCUMENT_TYPES = [
        DocumentTypeConfig(
            type_id="factura_fiscala",
            name_ro="FacturƒÉ fiscalƒÉ",
            name_ru="–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞",
            keywords_ro=["facturƒÉ fiscalƒÉ", "factura fiscalƒÉ", "fiscal", "tva", "nds"],
            keywords_ru=["—Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞", "—Ñ–∞–∫—Ç—É—Ä–∞", "—Ñiscal", "—Ç–≤–∞", "–Ω–¥—Å"],
            required_fields=["number", "date", "seller", "buyer", "idno", "vat_amount", "total_amount"],
            fiscal_code="FISC"
        ),
        DocumentTypeConfig(
            type_id="bon_fiscal",
            name_ro="Bon fiscal",
            name_ru="–§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫",
            keywords_ro=["bon fiscal", "bon", "chitan»õƒÉ", "casƒÉ"],
            keywords_ru=["—á–µ–∫", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫", "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è", "–∫–∞—Å—Å–∞"],
            required_fields=["date", "time", "items", "total_amount", "cash_register"],
            fiscal_code="BON"
        ),
        DocumentTypeConfig(
            type_id="stat_plata",
            name_ro="Stat de platƒÉ",
            name_ru="–í–µ–¥–æ–º–æ—Å—Ç—å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É",
            keywords_ro=["stat de platƒÉ", "salarii", "angaja»õi", "plata"],
            keywords_ru=["–≤–µ–¥–æ–º–æ—Å—Ç—å", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "–≤—ã–ø–ª–∞—Ç–∞"],
            required_fields=["period", "employees", "positions", "salaries", "total_amount"]
        ),
        DocumentTypeConfig(
            type_id="declaratie_tva",
            name_ro="Declara»õie TVA",
            name_ru="–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –ù–î–°",
            keywords_ro=["declara»õie tva", "tva", "nds", "fiscal"],
            keywords_ru=["–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –Ω–¥—Å", "—Ç–≤–∞", "–Ω–¥—Å", "—Ñiscal"],
            required_fields=["period", "company", "idno", "vat_amount", "total_sales"]
        ),
        DocumentTypeConfig(
            type_id="contract",
            name_ro="Contract",
            name_ru="–î–æ–≥–æ–≤–æ—Ä",
            keywords_ro=["contract", "acord", "conven»õie"],
            keywords_ru=["–¥–æ–≥–æ–≤–æ—Ä", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"],
            required_fields=["number", "date", "parties", "subject", "amount", "terms"]
        ),
        DocumentTypeConfig(
            type_id="aviz_expeditie",
            name_ro="Aviz de expedi»õie",
            name_ru="–ù–∞–∫–ª–∞–¥–Ω–∞—è",
            keywords_ro=["aviz de expedi»õie", "aviz", "expedi»õie", "livrare"],
            keywords_ru=["–Ω–∞–∫–ª–∞–¥–Ω–∞—è", "–æ—Ç–≥—Ä—É–∑–∫–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞", "—Ç–æ–≤–∞—Ä"],
            required_fields=["number", "date", "sender", "receiver", "items", "total"]
        ),
        DocumentTypeConfig(
            type_id="ordine_plata",
            name_ro="Ordin de platƒÉ",
            name_ru="–ü–ª–∞—Ç—ë–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ",
            keywords_ro=["ordin de platƒÉ", "platƒÉ", "transfer", "bancƒÉ"],
            keywords_ru=["–ø–ª–∞—Ç—ë–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ", "–ø–ª–∞—Ç—ë–∂", "–ø–µ—Ä–µ–≤–æ–¥", "–±–∞–Ω–∫"],
            required_fields=["number", "date", "payer", "payee", "amount", "purpose"]
        ),
        DocumentTypeConfig(
            type_id="chitanta",
            name_ro="Chitan»õƒÉ",
            name_ru="–ö–≤–∏—Ç–∞–Ω—Ü–∏—è",
            keywords_ro=["chitan»õƒÉ", "primire", "platƒÉ", "confirmare"],
            keywords_ru=["–∫–≤–∏—Ç–∞–Ω—Ü–∏—è", "–ø–æ–ª—É—á–µ–Ω–∏–µ", "–ø–ª–∞—Ç—ë–∂", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"],
            required_fields=["number", "date", "payer", "amount", "purpose"]
        )
    ]
    
    # –§–∏—Å–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –ú–æ–ª–¥–æ–≤—ã
    FISCAL_CODES = {
        "FISC": "–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞",
        "BON": "–§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫", 
        "DECL": "–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è",
        "CONTR": "–î–æ–≥–æ–≤–æ—Ä",
        "AVIZ": "–ù–∞–∫–ª–∞–¥–Ω–∞—è",
        "ORDIN": "–ü–ª–∞—Ç—ë–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ",
        "CHIT": "–ö–≤–∏—Ç–∞–Ω—Ü–∏—è"
    }
    
    # –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    @property
    def DOCUMENT_TYPES(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""
        return {
            "invoice": "–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞",
            "receipt": "–ß–µ–∫",
            "contract": "–î–æ–≥–æ–≤–æ—Ä",
            "statement": "–í—ã–ø–∏—Å–∫–∞",
            "order": "–ó–∞–∫–∞–∑",
            "delivery": "–ù–∞–∫–ª–∞–¥–Ω–∞—è",
            "payment": "–ü–ª–∞—Ç–µ–∂",
            "other": "–î—Ä—É–≥–æ–µ"
        }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    EXPORT_FORMATS = ["pdf", "excel", "csv", "json", "xml"]
    REPORT_TEMPLATES = {
        "summary": "–û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
        "fiscal": "–§–∏—Å–∫–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è FISC",
        "detailed": "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç",
        "custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á—ë—Ç"
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    ENABLE_NOTIFICATIONS = True
    NOTIFICATION_TYPES = ["email", "sms", "webhook"]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB
    ALLOWED_EXTENSIONS = [".pdf", ".jpg", ".jpeg", ".png", ".tiff", ".bmp"]
    ALLOWED_IMAGE_EXTENSIONS = [".jpg", ".jpeg", ".png", ".tiff", ".bmp"]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
    OCR_CONFIDENCE_THRESHOLD = 0.7
    OCR_TIMEOUT = 30  # —Å–µ–∫—É–Ω–¥—ã
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    CLASSIFICATION_CONFIDENCE_THRESHOLD = 0.8
    MAX_KEYWORDS_PER_TYPE = 10
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á—ë—Ç–æ–≤
    REPORT_RETENTION_DAYS = 365
    AUTO_BACKUP_ENABLED = True
    BACKUP_INTERVAL_HOURS = 24
    
    @classmethod
    def validate(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            for dir_path in [cls.UPLOADS_DIR, cls.REPORTS_DIR, cls.TEMPLATES_DIR, cls.STATIC_DIR]:
                dir_path.mkdir(parents=True, exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI –∫–ª—é—á–∞
            if not cls.OPENAI_API_KEY:
                print("‚ö† OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Tesseract OCR.")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract
            import subprocess
            try:
                result = subprocess.run([cls.TESSERACT_PATH, "--version"], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print(f"‚úì Tesseract –Ω–∞–π–¥–µ–Ω: {result.stdout.split()[1]}")
                else:
                    print("‚ö† Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return False
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tesseract: {e}")
                return False
            
            print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    @classmethod
    def get_language_config(cls, lang_code: str) -> LanguageConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —è–∑—ã–∫–∞"""
        return cls.SUPPORTED_LANGUAGES.get(lang_code, cls.SUPPORTED_LANGUAGES[cls.DEFAULT_LANGUAGE])
    
    @classmethod
    def get_document_type_config(cls, type_id: str) -> Optional[DocumentTypeConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        for doc_type in cls.MOLDOVAN_DOCUMENT_TYPES:
            if doc_type.type_id == type_id:
                return doc_type
        return None
    
    @classmethod
    def get_document_type_by_keywords(cls, text: str, lang_code: str = "ru") -> Optional[DocumentTypeConfig]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        text_lower = text.lower()
        
        for doc_type in cls.MOLDOVAN_DOCUMENT_TYPES:
            keywords = doc_type.keywords_ro if lang_code == "ro" else doc_type.keywords_ru
            for keyword in keywords:
                if keyword.lower() in text_lower:
                    return doc_type
        
        return None

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config() 